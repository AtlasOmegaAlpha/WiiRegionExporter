using Google;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Sheets.v4;
using Google.Apis.Sheets.v4.Data;
using System.Reflection;
using System.Text;

namespace WiiRegionExporter
{
    class Program
    {
        static void Main(string[] args)
        {
            string dataPath = Environment.CurrentDirectory + "/data";

            CheckFile(dataPath + "/credentials.txt");

            string googleClientId = "";
            string googleClientSecret = "";
            string[] scopes = [SheetsService.Scope.Spreadsheets];
            string spreadsheetId = "";
            string sheetName = "";

            foreach (string s in File.ReadAllLines(dataPath + "/credentials.txt"))
            {
                if (s.StartsWith("clientId="))
                    googleClientId = s.Split('=')[1];
                else if (s.StartsWith("clientSecret="))
                    googleClientSecret = s.Split('=')[1];
                else if (s.StartsWith("spreadsheetId="))
                    spreadsheetId = s.Split('=')[1];
                else if (s.StartsWith("sheetName="))
                    sheetName = s.Split('=')[1];
            }

            UserCredential credential = GoogleAuth.Login(googleClientId, googleClientSecret, scopes);
            GoogleSheetsManager sheetsManager = new GoogleSheetsManager(credential);

            Spreadsheet spreadsheet = sheetsManager.GetSpreadSheet(spreadsheetId, sheetName, true);
            var sheet = spreadsheet.Sheets.First();
            var gridData = sheet.Data.First();
            var merges = sheet.Merges ?? new List<GridRange>();
            ValueRange valueRange = sheetsManager.GetValueRangeFromGrid(gridData, merges);

            (List<Region> regions, int regionNameMaxLength, int subregionNameMaxLength) = GetRegions(valueRange);

            if (regions.Count <= 0)
                Error("No valid regions found");

            regions = regions.OrderBy(r => r.Id).ToList();

            var version = Assembly.GetExecutingAssembly().GetName().Version;
            StringBuilder sb = new StringBuilder($"/* Generated by WiiRegionExporter v{version} - {DateTime.Now.ToString("s")}\r\n" +
                $" * https://github.com/AtlasOmegaAlpha/WiiRegionExporter\r\n" +
                $" * Region list converted from: https://docs.google.com/spreadsheets/d/{spreadsheet.SpreadsheetId}/\r\n" +
                $" * Sheet: '{sheetName}'\r\n" +
                $" */\r\n\r\n");

            sb.AppendLine("typedef struct{");
            sb.AppendLine($"    char name[{subregionNameMaxLength}];");
            sb.AppendLine("    float lat;");
            sb.AppendLine("    float lon;");
            sb.AppendLine("}subRegionInfo;");
            sb.AppendLine("typedef struct{");
            sb.AppendLine($"    char name[{regionNameMaxLength}];");
            sb.AppendLine("    int subRegionAmt;");
            sb.AppendLine("    subRegionInfo *sub;");
            sb.AppendLine("}regionInfo;");
            sb.AppendLine();

            sb.AppendLine("void getRegInfo(regionInfo regionData[]){");
            foreach (Region region in regions)
            {
                sb.AppendLine($"\tstrcpy(regionData[{region.Id - 1}].name, \"{region.Name}\");");
            }
            sb.AppendLine();

            foreach (Region region in regions)
            {
                sb.AppendLine($"\tregionData[{region.Id - 1}].subRegionAmt = {region.subregions.Count};");
                sb.AppendLine($"\tregionData[{region.Id - 1}].sub = malloc({region.subregions.Count} * sizeof(subRegionInfo));");

                List<Subregion> rSubs = region.subregions.OrderBy(s => s.Id).ToList();
                foreach (Subregion subregion in rSubs)
                {
                    sb.AppendLine($"    strcpy(regionData[{region.Id - 1}].sub[{subregion.Id - 1}].name, \"{subregion.Name}\");");
                    sb.AppendLine($"    regionData[{region.Id - 1}].sub[{subregion.Id - 1}].lat = {subregion.Latitude};");
                    sb.AppendLine($"    regionData[{region.Id - 1}].sub[{subregion.Id - 1}].lon = {subregion.Longitude};");
                }
            }
            sb.AppendLine("}");

            string outPath = Path.Combine(Environment.CurrentDirectory, "out");
            Directory.CreateDirectory(outPath);
            string filePath = Path.Combine(outPath, "region_info.h");
            File.WriteAllText(filePath, sb.ToString());
            Exit();
        }

        static void Error(string err)
        {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine(err);
            Console.ResetColor();
            Console.WriteLine();
            Exit();
        }

        static void Exit()
        {
            Console.WriteLine("Press Enter to exit...");
            Console.ReadKey();
            Environment.Exit(0);
        }

        static void CheckFile(string path)
        {
            if (!File.Exists(path))
                Error("File not found: " + path);
        }

        static void ColumnNotFoundError(string columnName)
        {
            Error("'" + columnName + "' column not found");
        }

        static (List<Region>, int, int) GetRegions(ValueRange valueRange)
        {
            int regionIdColumnId = -1;
            int regionNameEnglishColumnId = -1;
            int subregionIdColumnId = -1;
            int latitudeColumnId = -1;
            int longitudeColumnId = -1;
            int subregionEnglishNameColumnId = -1;
            bool allColumnsFound = false;

            List<Region> regions = new List<Region>();
            int regionNameMaxLength = 0;
            int subregionNameMaxLength = 0;

            for (int i = 0; i < valueRange.Values.Count; i++)
            {
                for (int j = 0; j < valueRange.Values[i].Count; j++)
                {
                    if (i == 0) // Header
                    {
                        switch (((string)valueRange.Values[i][j]).ToLower())
                        {
                            case "region id":
                                regionIdColumnId = j;
                                break;

                            case "region name (english)":
                                regionNameEnglishColumnId = j;
                                break;

                            case "subregion id":
                                subregionIdColumnId = j;
                                break;

                            case "latitude":
                                latitudeColumnId = j;
                                break;

                            case "longitude":
                                longitudeColumnId = j;
                                break;

                            case "english name":
                                subregionEnglishNameColumnId = j;
                                break;
                        }
                        continue;
                    }

                    if (!allColumnsFound)
                    {
                        if (regionIdColumnId == -1)
                            ColumnNotFoundError("Region ID");

                        if (regionNameEnglishColumnId == -1)
                            ColumnNotFoundError("Region name (English)");

                        if (subregionIdColumnId == -1)
                            ColumnNotFoundError("Subregion ID");

                        if (latitudeColumnId == -1)
                            ColumnNotFoundError("Latitude");

                        if (longitudeColumnId == -1)
                            ColumnNotFoundError("Longitude");

                        if (subregionEnglishNameColumnId == -1)
                            ColumnNotFoundError("English name");

                        allColumnsFound = true;
                    }

                    if (j != 0)
                        continue;

                    string regionIdStr = (string)valueRange.Values[i][j + regionIdColumnId];
                    if (!int.TryParse(regionIdStr, out int regionId))
                        Error("Invalid Region ID: " + regionIdStr);

                    string regionName = (string)valueRange.Values[i][j + regionNameEnglishColumnId];

                    string subregionIdStr = (string)valueRange.Values[i][j + subregionIdColumnId];
                    if (!int.TryParse(subregionIdStr, out int subregionId))
                        Error("Invalid Subgregion ID: " + subregionIdStr + " on Region ID: " + regionId);

                    string latitudeStr = (string)valueRange.Values[i][j + latitudeColumnId];
                    if (!float.TryParse(latitudeStr, out float latitude))
                        Error("Invalid Latitude: " + latitude + " on Region ID: " + regionId + ", Subregion ID: " + subregionId);

                    string longitudeStr = (string)valueRange.Values[i][j + longitudeColumnId];
                    if (!float.TryParse(longitudeStr, out float longitude))
                        Error("Invalid Longitude: " + longitude + " on Region ID: " + regionId + ", Subregion ID: " + subregionId);

                    string subregionName = (string)valueRange.Values[i][j + subregionEnglishNameColumnId];

                    Region region = new Region(regionId, regionName);
                    if (!regions.Contains(region))
                    {
                        regions.Add(region);
                        if (regionName.Length > regionNameMaxLength)
                            regionNameMaxLength = regionName.Length;

                        Console.WriteLine($"Region {regionId}: {regionName}");
                    }
                    else
                        region = regions[regions.IndexOf(region)];

                    Subregion subregion = new Subregion(subregionId, subregionName, latitude, longitude);
                    if (!region.subregions.Contains(subregion))
                    {
                        region.subregions.Add(subregion);
                        if (subregionName.Length > subregionNameMaxLength)
                            subregionNameMaxLength = subregionName.Length;
                    }
                }
            }

            return (regions, regionNameMaxLength, subregionNameMaxLength);
        }
    }
}